<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".Fragement.Structure">

    <!-- TODO: Update blank fragment layout -->
    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:layout_editor_absoluteX="167dp"

        tools:layout_editor_absoluteY="16dp">

        <LinearLayout
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center"
                android:layout_marginTop="20dp"
                android:textColor="#0336FF"
                android:textSize="24sp"
                android:textStyle="bold"
                android:text="Introduction"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginLeft="20dp"
                android:layout_marginRight="20dp"
                android:layout_marginBottom="15dp"
                android:textColor="#000000"
                android:layout_marginTop="10dp"
                android:text="Structure is a collection of variables of different data types under a single name. It is similar to a class in that, both holds a collecion of data of different data types.

\n\nFor example: You want to store some information about a person: his/her name, citizenship number and salary. You can easily create different variables name, citNo, salary to store these information separately.\nHowever, in the future, you would want to store information about multiple persons. Now, you'd need to create different variables for each information per person:\nname1, citNo1, salary1, name2, citNo2, salary2" />

            <ImageView
                android:id="@+id/androidparty"
                android:layout_width="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginRight="10dp"
                android:layout_height="100dp"
                android:layout_gravity="center"
                android:src="@drawable/structure_in_cpp" />


            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center_horizontal"
                android:layout_marginTop="15dp"

                android:text="Why Linked List?"
                android:textSize="24sp"
                android:textColor="#0336FF"
                android:layout_marginBottom="20dp"
                android:textStyle="bold" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center_horizontal"
                android:layout_marginLeft="20dp"
                android:layout_marginRight="20dp"
                android:layout_marginBottom="10dp"
                android:text="Arrays can be used to store linear data of similar types, but arrays have the following limitations. \n \n
1) The size of the arrays is fixed: So we must know the upper limit on the number of elements in advance. Also, generally, the allocated memory is equal to the upper limit irrespective of the usage. \n \n
2) Inserting a new element in an array of elements is expensive because the room has to be created for the new elements and to create room existing elements have to be shifted. \n \n

For example, in a system, if we maintain a sorted list of IDs in an array id[ ].\n \n

id[ ] = [1000, 1010, 1050, 2000, 2040]. \n \n


And if we want to insert a new ID 1005, then to maintain the sorted order, we have to move all the elements after 1000 (excluding 1000). \n \n
Deletion is also expensive with arrays until unless some special techniques are used. For example, to delete 1010 in id[ ], everything after 1010 has to be moved. \n \n

Advantages over arrays \n
1) Dynamic size \n
2) Ease of insertion/deletion \n \n
Representation: \n
A linked list is represented by a pointer to the first node of the linked list. The first node is called the head. If the linked list is empty, then the value of the head is NULL.
Each node in a list consists of at least two parts: \n
1) data \n
2) Pointer (Or Reference) to the next node \n \n
In C, we can represent a node using structures. Below is an example of a linked list node with integer data.
In Java or C#, LinkedList can be represented as a class and a Node as a separate class. The LinkedList class contains a reference of Node class type."
                android:textColor="#000000" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center"
                android:layout_marginBottom="20dp"
                android:layout_marginTop="20dp"
                android:textColor="#0336FF"
                android:text="Videos"
                android:textSize="24sp"
                android:textStyle="bold" />

            <com.pierfrancescosoffritti.androidyoutubeplayer.core.player.views.YouTubePlayerView
                android:id="@+id/youtube_player_view"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="30dp"
                app:videoId="XBFGsKQX21s"
                app:autoPlay="false"
                app:showFullScreenButton="true" />


        </LinearLayout>


    </ScrollView>
</FrameLayout>